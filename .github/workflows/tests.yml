name: DataOps Challenge Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Wait for MongoDB to be ready
      run: |
        echo "Waiting for MongoDB to start..."
        sleep 10
        
    - name: Test dependencies
      run: python test_dependencies.py
    
    - name: Run basic tests
      run: python simple_test.py
    
    - name: Test local MongoDB connection
      run: python scripts/main_local.py
      env:
        MONGODB_TEST: true
    
    - name: Test data processing functions
      run: |
        python -c "
        from scripts.data_processing import create_carros_dataframe, create_montadoras_dataframe
        df1 = create_carros_dataframe()
        df2 = create_montadoras_dataframe()
        assert len(df1) == 5
        assert len(df2) == 5
        print('Data processing tests passed!')
        "

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 scripts/ configs/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 scripts/ configs/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Check code formatting with black
      run: black --check --diff scripts/ configs/
    
    - name: Check import sorting with isort
      run: isort --check-only --diff scripts/ configs/
